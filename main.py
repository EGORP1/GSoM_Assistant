import os
import asyncio
import logging
from typing import List, Tuple, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.enums import ChatAction
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

# ======================= –ë–ê–ó–ê =======================
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("–£–∫–∞–∂–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =======================
def grid(buttons: List[Tuple[str, str, str]], per_row: int = 2) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for i in range(0, len(buttons), per_row):
        row = []
        for text, kind, value in buttons[i:i+per_row]:
            if kind == "url":
                row.append(InlineKeyboardButton(text=text, url=value))
            else:
                row.append(InlineKeyboardButton(text=text, callback_data=value))
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

main_kb = grid([
    ("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", "cb", "studclubs"),
    ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",  "cb", "contacts"),
    ("üìñ –ú–µ–Ω—é",      "cb", "menu"),
], per_row=2)

studclubs_kb = grid([
    ("CASE Club",            "cb", "case_club"),
    ("–ö–ë–ö",                  "cb", "kbk"),
    ("Falcon Business Club", "cb", "falcon"),
    ("MCW",                  "cb", "mcw"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",             "cb", "back_main"),
], per_row=2)

menu_kb = grid([
    ("üß∫ –ü—Ä–∞—á–∫–∞",    "cb", "laundry"),
    ("üö∞ –í–æ–¥–∞",      "cb", "water"),
    ("üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏", "cb", "lost"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",     "cb", "back_main"),
], per_row=2)

contacts_kb = grid([
    ("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "cb", "contact_teachers"),
    ("üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",  "cb", "contact_admin"),
    ("üßë‚Äçüéì –ö—É—Ä–∞—Ç–æ—Ä—ã",     "cb", "contact_curators"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",          "cb", "back_main"),
], per_row=2)

# ======================= –•–†–ê–ù–ò–ú ID –ê–ö–¢–ò–í–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =======================
_active_msg_id: dict[int, int] = {}

async def get_active(chat_id: int) -> Optional[int]:
    return _active_msg_id.get(chat_id)

async def set_active(chat_id: int, msg_id: int):
    _active_msg_id[chat_id] = msg_id

async def drop_active(chat_id: int):
    mid = _active_msg_id.pop(chat_id, None)
    if mid:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass

# ======================= –•–ï–õ–ü–ï–†–´ =======================
async def think(chat_id: int, delay: float = 0.15):
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(delay)

def section(title: str, lines: List[str]) -> str:
    return f"<b>{title}</b>\n\n" + "\n".join(f"‚Ä¢ {x}" for x in lines)

def build_links_only(named_links: List[Tuple[str, str]]) -> str:
    parts = []
    for name, url in named_links:
        url = (url or "").strip()
        if url:
            parts.append(f"‚Ä¢ <a href='{url}'>{name}</a>")
    return "\n".join(parts) if parts else "\u00A0"  # –Ω–µ –ø—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å

def find_img_path(basename: str) -> Optional[str]:
    base = os.path.join("img", basename)
    for ext in (".jpg", ".jpeg", ".png", ".webp"):
        p = base + ext
        if os.path.isfile(p):
            return p
    return None

async def send_text_card(chat_id: int, text_html: str, kb: Optional[InlineKeyboardMarkup] = None) -> int:
    await think(chat_id)
    msg = await bot.send_message(chat_id, text_html, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    await set_active(chat_id, msg.message_id)
    return msg.message_id

async def send_photo_card(chat_id: int, image_basename: str, links: List[Tuple[str, str]], kb: Optional[InlineKeyboardMarkup] = None) -> int:
    path = find_img_path(image_basename)
    if not path:
        return await send_text_card(chat_id, f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: <b>{image_basename}</b>", kb)
    caption = build_links_only(links)
    await think(chat_id)
    msg = await bot.send_photo(chat_id=chat_id, photo=FSInputFile(path), caption=caption, parse_mode="HTML", reply_markup=kb)
    await set_active(chat_id, msg.message_id)
    return msg.message_id

async def edit_active_to_text(chat_id: int, text_html: str, kb: Optional[InlineKeyboardMarkup] = None) -> bool:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ù–ï –ø–æ—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
    1) —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è;
    2) –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ ‚Äî –º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –ø–æ–¥–ø–∏—Å—å (–æ—Å—Ç–∞–≤–ª—è—è –∫–∞—Ä—Ç–∏–Ω–∫—É).
    """
    mid = await get_active(chat_id)
    if not mid:
        return False
    # 1) –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=mid, text=text_html, parse_mode="HTML",
                                    disable_web_page_preview=True, reply_markup=kb)
        return True
    except Exception:
        pass
    # 2) –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ ‚Äî —Ñ–æ—Ç–æ)
    try:
        await bot.edit_message_caption(chat_id=chat_id, message_id=mid, caption=text_html, parse_mode="HTML",
                                       reply_markup=kb)
        return True
    except Exception:
        return False

# ======================= –¢–ï–ö–°–¢–´ =======================
WELCOME = (
    "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
    "–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –°–ü–±–ì–£. –ü–æ–º–æ–≥—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, —Å—Ç—É–¥–∫–ª—É–±–∞–º–∏, —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."
)

LAUNDRY = (
    "üß∫ <b>–ü—Ä–∞—á–∫–∞ –°–ü–±–ì–£</b>\n\n"
    "1) <a href=\"https://docs.google.com/spreadsheets/d/1P0C0cLeAVVUPPkjjJ2KXgWVTPK4TEX6aqUblOCUnepI/edit?usp=sharing\">–ü–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "2) <a href=\"https://docs.google.com/spreadsheets/d/1ztCbv9GyKyNQe5xruOHnNnLVwNPLXOcm9MmYw2n–ü5kU/edit?usp=drivesdk\">–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "3) <a href=\"https://docs.google.com/spreadsheets/d/1xiEC3lD5_9b9Hubot1YH5m7_tOsqMjL39ZIzUtuWffk/edit?usp=sharing\">–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å</a>\n"
    "4) <a href=\"https://docs.google.com/spreadsheets/d/1D-EFVHeAd44Qe7UagronhSF5NS4dP76Q2_CnX1wzQis/edit\">–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "5) <a href=\"https://docs.google.com/spreadsheets/d/1XFIQ6GCSrwcBd4FhhJpY897udcCKx6kzOZoTXdCjqhI/edit?usp=sharing\">–ü—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "6) <a href=\"https://docs.google.com/spreadsheets/d/140z6wAzC4QR3SKVec7QLJIZp4CHfNacVDFoIZcov1aI/edit?usp=sharing\">–®–µ—Å—Ç–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "7) <a href=\"https://docs.google.com/spreadsheets/d/197PG09l5Tl9PkGJo2zqySbOTKdmcF_2mO4D_VTMrSa4/edit?usp=drivesdk\">–°–µ–¥—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "8) <a href=\"https://docs.google.com/spreadsheets/d/1EBvaLpxAK5r91yc-jaCa8bj8iLumwJvGFjTDlEArRLA/edit?usp=sharing\">–í–æ—Å—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "9) <a href=\"https://docs.google.com/spreadsheets/d/1wGxLQLF5X22JEqMlq0mSVXMyrMQslXbemo-Z8YQcSS8/edit?usp=sharing\">–î–µ–≤—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>"
)

# ======================= –°–°–´–õ–ö–ò –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø =======================
MCW_URL    = os.getenv("MCW_URL", "").strip()
FALCON_URL = os.getenv("FALCON_URL", "").strip()
CASE_URL   = os.getenv("CASE_CLUB_URL", "https://t.me/gsomspbucaseclub").strip()
KBK_URL    = os.getenv("KBK_URL", "").strip()

# ======================= –ö–û–ú–ê–ù–î–´ =======================
async def delete_user_message_later(chat_id: int, message_id: int, delay: float = 0.8):
    try:
        await asyncio.sleep(delay)
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏)
    await drop_active(message.chat.id)
    await send_text_card(message.chat.id, WELCOME, main_kb)
    # —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ 0.8 —Å–µ–∫
    asyncio.create_task(delete_user_message_later(message.chat.id, message.message_id, 0.8))

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await drop_active(message.chat.id)
    await send_text_card(message.chat.id, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"]), menu_kb)
    asyncio.create_task(delete_user_message_later(message.chat.id, message.message_id, 0.8))

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await drop_active(message.chat.id)
    await send_text_card(message.chat.id, section("‚ùì –ü–æ–º–æ—â—å", [
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫; /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é; /help ‚Äî –ø–æ–º–æ—â—å."
    ]), main_kb)
    asyncio.create_task(delete_user_message_later(message.chat.id, message.message_id, 0.8))

# ======================= –ö–û–õ–ë–≠–ö–ò =======================
@dp.callback_query()
async def on_cb(cb: types.CallbackQuery):
    data = cb.data
    chat_id = cb.message.chat.id

    # ===== –ì–ª–∞–≤–Ω–æ–µ =====
    if data == "back_main":
        # –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞ ‚Äî –Ω–µ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ
        # –∑–¥–µ—Å—å –¥–æ–ø—É—Å—Ç–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ (—É–¥–∞–ª–∏–º –∏ —Å–æ–∑–¥–∞–¥–∏–º)
        await drop_active(chat_id)
        await send_text_card(chat_id, WELCOME, main_kb)

    elif data == "menu":
        await drop_active(chat_id)
        await send_text_card(chat_id, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"]), menu_kb)

    elif data == "contacts":
        await drop_active(chat_id)
        await send_text_card(chat_id, section("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", ["–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá"]), contacts_kb)

    # ===== –°—Ç—É–¥–∫–ª—É–±—ã ‚Äî –ù–ï –æ—Ç—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! =====
    elif data == "studclubs":
        text = section("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", ["–í—ã–±–µ—Ä–∏ –∫–ª—É–± –Ω–∏–∂–µ üëá"])
        ok = await edit_active_to_text(chat_id, text, studclubs_kb)
        if not ok:
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π) ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º
            await send_text_card(chat_id, text, studclubs_kb)

    # ===== –ú–µ–Ω—é-—Ä–∞–∑–Ω–æ–µ =====
    elif data == "laundry":
        await drop_active(chat_id)
        await send_text_card(chat_id, LAUNDRY, menu_kb)

    elif data == "water":
        await drop_active(chat_id)
        await send_text_card(chat_id, "<b>üö∞ –í–æ–¥–∞</b>\n\n‚Ä¢ <a href=\"https://chat.whatsapp.com/BUtruTEY8pvL9Ryh5TcaLw?mode=ems_copy_t\">Whatsapp</a>", menu_kb)

    elif data == "lost":
        await drop_active(chat_id)
        await send_text_card(chat_id, "<b>üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏ –°–ü–±–ì–£</b>\n\n‚Ä¢ <a href='https://t.me/+CzTrsVUbavM5YzNi'>Telegram-–≥—Ä—É–ø–ø–∞</a>", menu_kb)

    elif data == "contact_admin":
        await drop_active(chat_id)
        await send_text_card(chat_id, section("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", ["office@gsom.spbu.ru"]), contacts_kb)

    elif data == "contact_teachers":
        await drop_active(chat_id)
        await send_text_card(chat_id, section("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", ["–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"]), contacts_kb)

    elif data == "contact_curators":
        await drop_active(chat_id)
        await send_text_card(chat_id, section("–ö—É—Ä–∞—Ç–æ—Ä—ã", ["@gsomates"]), contacts_kb)

    # ===== –ö–ª—É–±—ã: —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å (—Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏); iOS-–Ω–∞–¥—ë–∂–Ω–æ ‚Äî delete+send =====
    elif data == "mcw":
        await drop_active(chat_id)
        await send_photo_card(chat_id, "MCW", [("MCW ‚Äî Management Career Week", MCW_URL)], studclubs_kb)

    elif data == "falcon":
        await drop_active(chat_id)
        await send_photo_card(chat_id, "Falcon", [("Falcon Business Club ‚Äî —Å—Å—ã–ª–∫–∞", FALCON_URL)], studclubs_kb)

    elif data == "case_club":
        await drop_active(chat_id)
        await send_photo_card(chat_id, "CaseClub", [("GSOM SPbU Case Club ‚Äî Telegram", CASE_URL)], studclubs_kb)

    elif data == "kbk":
        await drop_active(chat_id)
        await send_photo_card(chat_id, "KBK", [("–ö–ë–ö ‚Äî —Å—Å—ã–ª–∫–∞", KBK_URL)], studclubs_kb)

    await cb.answer()

# ======================= –ó–ê–ü–£–°–ö =======================
async def main():
    try:
        await bot.set_my_commands([
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
            types.BotCommand(command="menu",  description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="help",  description="–ü–æ–º–æ—â—å"),
        ])
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
