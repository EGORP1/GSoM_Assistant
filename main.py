import os
import asyncio
import logging
from typing import List, Tuple, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.enums import ChatAction
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    FSInputFile
)

# ======================= –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê =======================
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("–£–∫–∞–∂–∏ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =======================
def grid(buttons: List[Tuple[str, str, str]], per_row: int = 2) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for i in range(0, len(buttons), per_row):
        row = []
        for text, kind, value in buttons[i:i+per_row]:
            if kind == "url":
                row.append(InlineKeyboardButton(text=text, url=value))
            else:
                row.append(InlineKeyboardButton(text=text, callback_data=value))
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

main_kb = grid([
    ("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", "cb", "studclubs"),
    ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",  "cb", "contacts"),
    ("üìñ –ú–µ–Ω—é",      "cb", "menu"),
], per_row=2)

studclubs_kb = grid([
    ("CASE Club",            "cb", "case_club"),
    ("–ö–ë–ö",                  "cb", "kbk"),
    ("Falcon Business Club", "cb", "falcon"),
    ("MCW",                  "cb", "mcw"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",             "cb", "back_main"),
], per_row=2)

menu_kb = grid([
    ("üß∫ –ü—Ä–∞—á–∫–∞",    "cb", "laundry"),
    ("üö∞ –í–æ–¥–∞",      "cb", "water"),
    ("üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏", "cb", "lost"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",     "cb", "back_main"),
], per_row=2)

contacts_kb = grid([
    ("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "cb", "contact_teachers"),
    ("üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",  "cb", "contact_admin"),
    ("üßë‚Äçüéì –ö—É—Ä–∞—Ç–æ—Ä—ã",     "cb", "contact_curators"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",          "cb", "back_main"),
], per_row=2)

# ======================= –•–†–ê–ù–ò–ú ¬´–ê–ö–¢–ò–í–ù–£–Æ –ö–ê–†–¢–û–ß–ö–£¬ª =======================
# –î–ª—è iOS: –Ω–∏–∫–∞–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞. –ú—ã –í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
_active_msg_id: dict[int, int] = {}

async def set_active(chat_id: int, message_id: int):
    _active_msg_id[chat_id] = message_id

async def get_active(chat_id: int) -> Optional[int]:
    return _active_msg_id.get(chat_id)

async def drop_active(chat_id: int):
    msg_id = _active_msg_id.pop(chat_id, None)
    if msg_id:
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

# ======================= –•–ï–õ–ü–ï–†–´ –ö–ê–†–¢–û–ß–ï–ö =======================
async def think(chat_id: int, delay: float = 0.15):
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(delay)

def build_links_only(named_links: List[Tuple[str, str]]) -> str:
    # –†–æ–≤–Ω–æ —Ç–æ–ª—å–∫–æ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –∫–∞–∂–¥–∞—è —Å –º–∞—Ä–∫–µ—Ä–æ–º.
    parts = []
    for name, url in named_links:
        url = (url or "").strip()
        if url:
            parts.append(f"‚Ä¢ <a href='{url}'>{name}</a>")
    # –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (Telegram –Ω–µ –ª—é–±–∏—Ç –ø—É—Å—Ç—ã–µ –ø–æ–¥–ø–∏—Å–∏; –æ—Å—Ç–∞–≤–∏–º –Ω–µ–≤–∏–¥–∏–º—ã–π NBSP)
    return "\n".join(parts) if parts else "\u00A0"

def find_img_path(basename: str) -> Optional[str]:
    base = os.path.join("img", basename)
    for ext in (".jpg", ".jpeg", ".png", ".webp"):
        p = base + ext
        if os.path.isfile(p):
            return p
    return None

async def show_text_card(chat_id: int, text_html: str, kb: Optional[InlineKeyboardMarkup] = None):
    await drop_active(chat_id)
    await think(chat_id)
    msg = await bot.send_message(
        chat_id,
        text_html,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=kb
    )
    await set_active(chat_id, msg.message_id)

async def show_photo_card(chat_id: int, image_basename: str, links: List[Tuple[str, str]], kb: Optional[InlineKeyboardMarkup] = None):
    """
    –ï–î–ò–ù–ê–Ø –∫–∞—Ä—Ç–æ—á–∫–∞: —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å (–¢–û–õ–¨–ö–û –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏). –í—Å–µ–≥–¥–∞ delete+send (—É—Å—Ç–æ–π—á–∏–≤–æ –Ω–∞ iOS).
    """
    path = find_img_path(image_basename)
    if not path:
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
        await show_text_card(chat_id, f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: <b>{image_basename}</b>", kb)
        return

    caption = build_links_only(links)

    await drop_active(chat_id)
    await think(chat_id)
    msg = await bot.send_photo(
        chat_id=chat_id,
        photo=FSInputFile(path),
        caption=caption,
        parse_mode="HTML",
        reply_markup=kb
    )
    await set_active(chat_id, msg.message_id)

# ======================= –¢–ï–ö–°–¢–´ =======================
WELCOME = (
    "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
    "–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –°–ü–±–ì–£. –ü–æ–º–æ–≥—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, —Å—Ç—É–¥–∫–ª—É–±–∞–º–∏, —Å—Å—ã–ª–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏."
)

def section(title: str, lines: List[str]) -> str:
    return f"<b>{title}</b>\n\n" + "\n".join(f"‚Ä¢ {x}" for x in lines)

LAUNDRY = (
    "üß∫ <b>–ü—Ä–∞—á–∫–∞ –°–ü–±–ì–£</b>\n\n"
    "1) <a href=\"https://docs.google.com/spreadsheets/d/1P0C0cLeAVVUPPkjjJ2KXgWVTPK4TEX6aqUblOCUnepI/edit?usp=sharing\">–ü–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "2) <a href=\"https://docs.google.com/spreadsheets/d/1ztCbv9GyKyNQe5xruOHnNnLVwNPLXOcm9MmYw2nP5kU/edit?usp=drivesdk\">–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "3) <a href=\"https://docs.google.com/spreadsheets/d/1xiEC3lD5_9b9Hubot1YH5m7_tOsqMjL39ZIzUtuWffk/edit?usp=sharing\">–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å</a>\n"
    "4) <a href=\"https://docs.google.com/spreadsheets/d/1D-EFVHeAd44Qe7UagronhSF5NS4dP76Q2_CnX1wzQis/edit\">–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "5) <a href=\"https://docs.google.com/spreadsheets/d/1XFIQ6GCSrwcBd4FhhJpY897udcCKx6kzOZoTXdCjqhI/edit?usp=sharing\">–ü—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "6) <a href=\"https://docs.google.com/spreadsheets/d/140z6wAzC4QR3SKVec7QLJIZp4CHfNacVDFoIZcov1aI/edit?usp=sharing\">–®–µ—Å—Ç–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "7) <a href=\"https://docs.google.com/spreadsheets/d/197PG09l5Tl9PkGJo2zqySbOTKdmcF_2mO4D_VTMrSa4/edit?usp=drivesdk\">–°–µ–¥—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "8) <a href=\"https://docs.google.com/spreadsheets/d/1EBvaLpxAK5r91yc-jaCa8bj8iLumwJvGFjTDlEArRLA/edit?usp=sharing\">–í–æ—Å—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "9) <a href=\"https://docs.google.com/spreadsheets/d/1wGxLQLF5X22JEqMlq0mSVXMyrMQslXbemo-Z8YQcSS8/edit?usp=sharing\">–î–µ–≤—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>"
)

# ======================= –°–°–´–õ–ö–ò –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø =======================
MCW_URL    = os.getenv("MCW_URL", "").strip()
FALCON_URL = os.getenv("FALCON_URL", "").strip()
CASE_URL   = os.getenv("CASE_CLUB_URL", "https://t.me/gsomspbucaseclub").strip()
KBK_URL    = os.getenv("KBK_URL", "").strip()

# ======================= –ö–û–ú–ê–ù–î–´ =======================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await show_text_card(message.chat.id, WELCOME, main_kb)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await show_text_card(message.chat.id, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"]), menu_kb)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await show_text_card(message.chat.id, section("‚ùì –ü–æ–º–æ—â—å", [
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫; /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é; /help ‚Äî –ø–æ–º–æ—â—å."
    ]), main_kb)

# ======================= –ö–û–õ–ë–≠–ö–ò =======================
@dp.callback_query()
async def on_cb(cb: types.CallbackQuery):
    data = cb.data
    chat_id = cb.message.chat.id

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_main":
        await show_text_card(chat_id, WELCOME, main_kb)

    elif data == "menu":
        await show_text_card(chat_id, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"]), menu_kb)

    elif data == "contacts":
        await show_text_card(chat_id, section("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", ["–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá"]), contacts_kb)

    elif data == "studclubs":
        await show_text_card(chat_id, section("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", ["–í—ã–±–µ—Ä–∏ –∫–ª—É–± –Ω–∏–∂–µ üëá"]), studclubs_kb)

    # –†–∞–∑–Ω–æ–µ –º–µ–Ω—é
    elif data == "laundry":
        await show_text_card(chat_id, LAUNDRY, menu_kb)

    elif data == "water":
        await show_text_card(chat_id, "<b>üö∞ –í–æ–¥–∞</b>\n\n‚Ä¢ <a href=\"https://chat.whatsapp.com/BUtruTEY8pvL9Ryh5TcaLw?mode=ems_copy_t\">Whatsapp</a>", menu_kb)

    elif data == "lost":
        await show_text_card(chat_id, "<b>üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏ –°–ü–±–ì–£</b>\n\n‚Ä¢ <a href='https://t.me/+CzTrsVUbavM5YzNi'>Telegram-–≥—Ä—É–ø–ø–∞</a>", menu_kb)

    elif data == "contact_admin":
        await show_text_card(chat_id, section("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", ["office@gsom.spbu.ru"]), contacts_kb)

    elif data == "contact_teachers":
        await show_text_card(chat_id, section("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", ["–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"]), contacts_kb)

    elif data == "contact_curators":
        await show_text_card(chat_id, section("–ö—É—Ä–∞—Ç–æ—Ä—ã", ["@gsomates"]), contacts_kb)

    # === –ö–õ–£–ë–´ (–µ–¥–∏–Ω–∞—è –º–µ–¥–∏–∞–∫–∞—Ä—Ç–æ—á–∫–∞: —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏) ===
    elif data == "mcw":
        await show_photo_card(chat_id, "MCW", [("MCW ‚Äî Management Career Week", MCW_URL)], studclubs_kb)

    elif data == "falcon":
        await show_photo_card(chat_id, "Falcon", [("Falcon Business Club ‚Äî —Å—Å—ã–ª–∫–∞", FALCON_URL)], studclubs_kb)

    elif data == "case_club":
        await show_photo_card(chat_id, "CaseClub", [("GSOM SPbU Case Club ‚Äî Telegram", CASE_URL)], studclubs_kb)

    elif data == "kbk":
        await show_photo_card(chat_id, "KBK", [("–ö–ë–ö ‚Äî —Å—Å—ã–ª–∫–∞", KBK_URL)], studclubs_kb)

    await cb.answer("–ì–æ—Ç–æ–≤–æ")

# ======================= –ó–ê–ü–£–°–ö =======================
async def main():
    try:
        await bot.set_my_commands([
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
            types.BotCommand(command="menu",  description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="help",  description="–ü–æ–º–æ—â—å"),
        ])
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
