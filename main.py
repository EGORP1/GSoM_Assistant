import os
import asyncio
import logging
from typing import List, Tuple, Optional, Sequence

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ChatAction
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton,
    InputMediaPhoto, FSInputFile
)

# ======================= –ë–ê–ó–ê =======================
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN", "7936690948:AAGbisw1Sc4CQxxR-208mIF-FVUiZalpoJs").strip()
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================= –£–ß–Å–¢ –°–û–û–ë–©–ï–ù–ò–ô (in-memory) =======================
_active_msg: dict[int, int] = {}     # ¬´–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞¬ª –≤ —á–∞—Ç–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤ –Ω–µ—ë)
_registry: dict[int, list[int]] = {} # –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è /clear)

async def get_active_msg_id(chat_id: int) -> Optional[int]: return _active_msg.get(chat_id)
async def set_active_msg_id(chat_id: int, mid: int): _active_msg[chat_id] = mid
async def clear_active_msg_id(chat_id: int): _active_msg.pop(chat_id, None)

async def reg_push(chat_id: int, mid: int): _registry.setdefault(chat_id, []).append(mid)
async def reg_get_all(chat_id: int) -> list[int]: return list(_registry.get(chat_id, []))
async def reg_clear(chat_id: int): _registry.pop(chat_id, None)

async def delete_safe(chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

async def think(chat_id: int, delay: float = 0.1):
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(delay)

# ======================= UI-–•–ï–õ–ü–ï–†–´ =======================
def section(title: str, lines: Sequence[str], footer: Optional[str] = None) -> str:
    body = "\n".join(lines)
    extra = f"\n\n{footer}" if footer else ""
    return f"<b>{title}</b>\n\n{body}{extra}"

def _row(buttons: List[Tuple[str, str, str]]) -> List[InlineKeyboardButton]:
    row: List[InlineKeyboardButton] = []
    for text, kind, value in buttons:
        row.append(InlineKeyboardButton(text=text, url=value) if kind == "url"
                   else InlineKeyboardButton(text=text, callback_data=value))
    return row

def grid(buttons: List[Tuple[str, str, str]], per_row: int = 2) -> InlineKeyboardMarkup:
    rows = [ _row(buttons[i:i+per_row]) for i in range(0, len(buttons), per_row) ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def send_card(chat_id: int, text_html: str, kb: Optional[InlineKeyboardMarkup] = None) -> types.Message:
    await think(chat_id)
    msg = await bot.send_message(chat_id, text_html, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    await reg_push(chat_id, msg.message_id)
    await set_active_msg_id(chat_id, msg.message_id)
    return msg

async def edit_card(msg: types.Message, text_html: str, kb: Optional[InlineKeyboardMarkup] = None):
    return await msg.edit_text(text_html, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)

async def send_media_card(chat_id: int, image_path: str, caption_html: str,
                          kb: Optional[InlineKeyboardMarkup] = None) -> types.Message:
    await think(chat_id)
    msg = await bot.send_photo(chat_id, FSInputFile(image_path), caption=caption_html, parse_mode="HTML", reply_markup=kb)
    await reg_push(chat_id, msg.message_id)
    await set_active_msg_id(chat_id, msg.message_id)
    return msg

async def edit_media_or_send_new(msg: types.Message, image_path: str, caption_html: str,
                                 kb: Optional[InlineKeyboardMarkup] = None):
    """–ï—Å–ª–∏ msg ‚Äî –º–µ–¥–∏–∞, –º–µ–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É+–ø–æ–¥–ø–∏—Å—å; –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º –º–µ–¥–∏–∞–∫–∞—Ä—Ç–æ—á–∫—É."""
    try:
        media = InputMediaPhoto(media=FSInputFile(image_path), caption=caption_html, parse_mode="HTML")
        await msg.edit_media(media=media, reply_markup=kb)
    except Exception:
        await delete_safe(msg.chat.id, msg.message_id)
        await send_media_card(msg.chat.id, image_path, caption_html, kb)

async def edit_text_or_send_new(msg: types.Message, text_html: str,
                                kb: Optional[InlineKeyboardMarkup] = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ ¬´–ù–∞–∑–∞–¥¬ª).
       –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É."""
    try:
        await msg.edit_text(text_html, parse_mode="HTML", disable_web_page_preview=True, reply_markup=kb)
    except Exception:
        await delete_safe(msg.chat.id, msg.message_id)
        await send_card(msg.chat.id, text_html, kb)

# ======================= –¢–ï–ö–°–¢–´ =======================
WELCOME_TEXT = (
    "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
    "–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –°–ü–±–ì–£.\n\n"
    "–ü–æ–º–æ–≥—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Å—Ç—É–¥–∫–ª—É–±—ã, –¥–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã. üëá"
)
LAUNDRY_TEXT_HTML = (
    "üß∫ <b>–ü—Ä–∞—á–∫–∞ –°–ü–±–ì–£</b>\n\n"
    "1) <a href=\"https://docs.google.com/spreadsheets/d/1P0C0cLeAVVUPPkjjJ2KXgWVTPK4TEX6aqUblOCUnepI/edit?usp=sharing\">–ü–µ—Ä–≤—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "2) <a href=\"https://docs.google.com/spreadsheets/d/1ztCbv9GyKyNQe5xruOH–Ω–ùLVwNPLXOcm9MmYw2nP5kU/edit?usp=drivesdk\">–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "3) <a href=\"https://docs.google.com/spreadsheets/d/1xiEC3lD5_9b9Hubot1YH5m7_tOsqMjL39ZIzUtuWffk/edit?usp=sharing\">–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å</a>\n"
    "4) <a href=\"https://docs.google.com/spreadsheets/d/1D-EFVHeAd44Qe7UagronhSF5NS4dP76Q2_CnX1wzQis/edit\">–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "5) <a href=\"https://docs.google.com/spreadsheets/d/1XFIQ6GCSrwcBd4FhhJpY897udcCKx6–∫zOZoTXdCjqhI/edit?usp=sharing\">–ü—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>\n"
    "6) <a href=\"https://docs.google.com/spreadsheets/d/140z6wAzC4QR3SKVec7QLJIZp4CHfNacVDFoIZcov1aI/edit?usp=sharing\">–®–µ—Å—Ç–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "7) <a href=\"https://docs.google.com/spreadsheets/d/197PG09l5Tl9PkGJo2zqySbOTKdmcF_2mO4D_VTMrSa4/edit?usp=drivesdk\">–°–µ–¥—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "8) <a href=\"https://docs.google.com/spreadsheets/d/1EBvaLpxAK5r91yc-jaCa8bj8iLumwJvGFjTDlEArRLA/edit?usp=sharing\">–í–æ—Å—å–º–æ–π –∫–æ—Ä–ø—É—Å</a>\n"
    "9) <a href=\"https://docs.google.com/spreadsheets/d/1wGxLQLF5X22JEqMlq0mSVXMyrMQslXbemo-Z8YQcSS8/edit?usp=sharing\">–î–µ–≤—è—Ç—ã–π –∫–æ—Ä–ø—É—Å</a>"
)
WATER_TEXT_HTML = section("üö∞ –í–æ–¥–∞", ["–ü–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –≤ <a href=\"https://chat.whatsapp.com/BUtruTEY8pvL9Ryh5TcaLw?mode=ems_copy_t\">Whatsapp</a>"])
LOST_TEXT_HTML  = section("üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏ –°–ü–±–ì–£", [
    "–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–µ—â–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º.",
    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª –∏–ª–∏ –Ω–∞—à—ë–ª ‚Äî –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞!",
    "üì≤ <a href='https://t.me/+CzTrsVUbavM5YzNi'>–ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram-–≥—Ä—É–ø–ø—É</a>"
])

# ======================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =======================
REPLY_START_BTN = "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=REPLY_START_BTN)]],
    resize_keyboard=True
)

main_keyboard = grid([
    ("üìö TimeTable", "url", "https://timetable.spbu.ru/GSOM"),
    ("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", "cb",  "studclubs"),
    ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",  "cb",  "contacts"),
    ("üìñ –ú–µ–Ω—é",      "cb",  "menu"),
], per_row=2)

menu_keyboard = grid([
    ("üß∫ –ü—Ä–∞—á–∫–∞",    "cb", "laundry"),
    ("üö∞ –í–æ–¥–∞",      "cb", "water"),
    ("üîé –ü–æ—Ç–µ—Ä—è—à–∫–∏", "cb", "lost"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",     "cb", "back_main"),
], per_row=2)

studclubs_keyboard = grid([
    ("CASE Club",            "cb", "case_club"),
    ("–ö–ë–ö",                  "cb", "kbk"),
    ("Falcon Business Club", "cb", "falcon"),
    ("MCW",                  "cb", "MCW"),
    ("SPbU Golf Club",       "cb", "golf"),
    ("Sport and Culture",    "cb", "sport_culture"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",             "cb", "back_main"),
], per_row=2)

contacts_keyboard = grid([
    ("üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "cb", "contact_teachers"),
    ("üèõ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",  "cb", "contact_admin"),
    ("üßë‚Äçüéì –ö—É—Ä–∞—Ç–æ—Ä—ã",     "cb", "contact_curators"),
    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",          "cb", "back_main"),
], per_row=2)

# ======================= –ï–î–ò–ù–´–ô –ü–û–ö–ê–ó –ö–ê–†–¢–û–ß–ö–ò (—Ç–µ–∫—Å—Ç) =======================
async def show_card_exclusive(chat_id: int, text_html: str, kb: Optional[InlineKeyboardMarkup] = None):
    prev = await get_active_msg_id(chat_id)
    if prev:
        try:
            await bot.edit_message_text(chat_id=chat_id, message_id=prev,
                                        text=text_html, parse_mode="HTML",
                                        disable_web_page_preview=True, reply_markup=kb)
            return
        except Exception:
            await delete_safe(chat_id, prev)
            await clear_active_msg_id(chat_id)
    await send_card(chat_id, text_html, kb)

# ======================= –ö–û–ú–ê–ù–î–´ =======================
async def schedule_delete(chat_id: int, message_id: int, delay: float):
    try:
        await asyncio.sleep(delay); await bot.delete_message(chat_id, message_id)
    except Exception:
        pass

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    asyncio.create_task(schedule_delete(message.chat.id, message.message_id, 0.8))
    txt = section("‚ùì –ü–æ–º–æ—â—å", [
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        "–ö–æ–º–∞–Ω–¥—ã: /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, /help ‚Äî –ø–æ–º–æ—â—å.",
        f"Reply-–∫–Ω–æ–ø–∫–∞ ¬´{REPLY_START_BTN}¬ª ‚Äî –±—ã—Å—Ç—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É.",
        "–°—Å—ã–ª–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã."
    ])
    await show_card_exclusive(message.chat.id, txt, main_keyboard)

@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    asyncio.create_task(schedule_delete(message.chat.id, message.message_id, 0.8))
    await show_card_exclusive(message.chat.id, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"]), menu_keyboard)

@dp.message(Command(commands=["start", "—Å—Ç–∞—Ä—Ç"]))
async def start_handler(message: types.Message):
    asyncio.create_task(schedule_delete(message.chat.id, message.message_id, 0.8))
    await show_card_exclusive(message.chat.id, WELCOME_TEXT, main_keyboard)
    # –º–∞–ª–µ–Ω—å–∫–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ä–∞–¥–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    ph = await bot.send_message(message.chat.id, " ", reply_markup=reply_keyboard)
    await reg_push(message.chat.id, ph.message_id)

@dp.message(Command("clear"))
async def clear_handler(message: types.Message):
    chat_id = message.chat.id
    asyncio.create_task(schedule_delete(chat_id, message.message_id, 1.0))
    async def nuke():
        await asyncio.sleep(0.7)
        for mid in await reg_get_all(chat_id): await delete_safe(chat_id, mid)
        await reg_clear(chat_id); await clear_active_msg_id(chat_id)
    asyncio.create_task(nuke())
    confirm = await bot.send_message(chat_id, "üßπ –û—á–∏—â–∞—é –≤—Å—ë‚Ä¶"); await reg_push(chat_id, confirm.message_id)
    asyncio.create_task(schedule_delete(chat_id, confirm.message_id, 1.0))

@dp.message(F.text == REPLY_START_BTN)
async def reply_start_handler(message: types.Message):
    asyncio.create_task(schedule_delete(message.chat.id, message.message_id, 0.3))
    await show_card_exclusive(message.chat.id, WELCOME_TEXT, main_keyboard)
    ph = await bot.send_message(message.chat.id, " ", reply_markup=reply_keyboard)
    await reg_push(message.chat.id, ph.message_id)

# ======================= –ö–û–õ–ë–≠–ö–ò =======================
@dp.callback_query()
async def callback_handler(cb: types.CallbackQuery):
    data = cb.data
    msg  = cb.message

    # --- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç—É ---
    if data == "studclubs":
        await edit_text_or_send_new(msg, section("üé≠ –°—Ç—É–¥–∫–ª—É–±—ã", ["–í—ã–±–µ—Ä–∏ –∫–ª—É–± –Ω–∏–∂–µ üëá"]), studclubs_keyboard)
    elif data == "menu":
        await edit_text_or_send_new(msg, section("üìñ –ú–µ–Ω—é", ["–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá"]), menu_keyboard)
    elif data == "back_main":
        await edit_text_or_send_new(msg, WELCOME_TEXT, main_keyboard)
    elif data == "laundry":
        await edit_text_or_send_new(msg, LAUNDRY_TEXT_HTML, menu_keyboard)
    elif data == "water":
        await edit_text_or_send_new(msg, WATER_TEXT_HTML, menu_keyboard)
    elif data == "lost":
        await edit_text_or_send_new(msg, LOST_TEXT_HTML, menu_keyboard)

    # ==== –∫–ª—É–±—ã: –º–µ–¥–∏–∞–∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + –ø–æ–¥–ø–∏—Å—å) ====
    elif data == "case_club":
        await edit_media_or_send_new(
            msg,
            image_path="img/CaseClub.jpg",
            caption_html="üìä <b>GSOM SPbU Case Club</b>\n\n<a href='https://t.me/gsomspbucaseclub'>–ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram</a>",
            kb=studclubs_keyboard
        )
    elif data == "kbk":
        await edit_media_or_send_new(
            msg,
            image_path="img/KBK.jpg",
            caption_html="üé§ <b>–ö–ë–ö</b>\n\n<a href='https://t.me/forumcbc'>Telegram</a>\n<a href='https://vk.com/forumcbc'>VK</a>",
            kb=studclubs_keyboard
        )
    elif data == "falcon":
        await edit_media_or_send_new(
            msg,
            image_path="img/Falcon.jpg",
            caption_html="ü¶Ö <b>Falcon Business Club</b>\n\n<a href='https://t.me/falcongsom'>Telegram</a>",
            kb=studclubs_keyboard
        )
    elif data == "MCW":
        await edit_media_or_send_new(
            msg,
            image_path="img/MCW.jpg",
            caption_html="üìå <b>Management Career Week</b>\n\n<a href='https://t.me/falcongsom'>Telegram</a>",
            kb=studclubs_keyboard
        )

    elif data == "golf":
        await edit_text_or_send_new(msg, section("SPbU Golf Club", ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"]), studclubs_keyboard)
    elif data == "sport_culture":
        await edit_text_or_send_new(msg, section("Sport and Culture", ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"]), studclubs_keyboard)
    elif data == "contacts":
        await edit_text_or_send_new(msg, section("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", ["–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá"]), contacts_keyboard)
    elif data == "contact_admin":
        await edit_text_or_send_new(msg, section("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", ["office@gsom.spbu.ru"]), contacts_keyboard)
    elif data == "contact_teachers":
        await edit_text_or_send_new(msg, section("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", ["–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"]), contacts_keyboard)
    elif data == "contact_curators":
        await edit_text_or_send_new(msg, section("–ö—É—Ä–∞—Ç–æ—Ä—ã", ["@gsomates"]), contacts_keyboard)

    await cb.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)

# ======================= –ó–ê–ü–£–°–ö =======================
async def main():
    try:
        await bot.set_my_commands([
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
            types.BotCommand(command="menu",  description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="help",  description="–ü–æ–º–æ—â—å"),
            types.BotCommand(command="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"),
        ])
    except Exception:
        pass
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
